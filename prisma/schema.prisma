// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER ------------------------------------------------------------
enum ROLE {
  USER
  ADMIN
  SUPERADMIN
  MODERATOR
  SAJID
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  image        String?
  role         ROLE     @default(USER)
  key          String   @default("")
  isCompleted  Boolean  @default(false)
  tokensUsed   String[] @default([])
  institution  String?
  isSubscribed Boolean  @default(false)
  createdAt    DateTime @default(now())

  questions          Question[]
  payments           Payment[]
  customTestsCreated CustomTest[]
  testAnalytics      TestAnalytic[]
}

model Payment {
  id        Int       @id @default(autoincrement())
  isPaid    Boolean   @default(false)
  paymentID String?
  expireAt  DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

// QUESTIONS -----------------------------------------------------------
model Question {
  id             String      @id @default(cuid())
  question       String
  options        Option?
  answer         ANSWER
  explanation    String      @default("")
  images         Images?
  subject        String      @default("unknown")
  chapter        String      @default("unknown")
  unit           String      @default("unknown")
  category       String      @default("mbbs")
  difficulty     String      @default("m")
  isreported     IsReported?
  isverified     IsVerified?
  isflagged      IsFlagged?
  attempt        Int         @default(0)
  correctattempt Int         @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  analytic TestQuestionAnswer[]

  @@index([chapter])
}

enum ANSWER {
  a
  b
  c
  d
}

model Option {
  questionId String   @id
  question   Question @relation(fields: [questionId], references: [id]) // Link to Question
  a          String
  b          String
  c          String
  d          String
}

model Images {
  questionId String   @id
  question   Question @relation(fields: [questionId], references: [id]) // Link to Question
  qn         String?
  a          String?
  b          String?
  c          String?
  d          String?
  exp        String?
}

model IsReported {
  questionId String    @id
  question   Question  @relation(fields: [questionId], references: [id]) // Link to Question
  state      Boolean   @default(false)
  by         String?
  message    String?
  date       DateTime?
}

model IsVerified {
  questionId String    @id
  question   Question  @relation(fields: [questionId], references: [id]) // Link to Question
  state      Boolean   @default(false)
  by         String?
  date       DateTime?
}

model IsFlagged {
  questionId String    @id
  question   Question  @relation(fields: [questionId], references: [id]) // Link to Question
  state      Boolean   @default(false)
  by         String?
  message    String?
  date       DateTime?
}

model QuestionCount {
  id       String  @id @default(cuid())
  subject  String
  chapter  String
  count    Int     @default(0)

  @@unique([subject, chapter]) // Ensure unique combinations of subject and chapter
}


// TESTS ---------------------------------------------------
enum TypeOfTest {
  MODEL
  SUBJECT_WISE
  CHAPTER_WISE
  TOPIC_WISE
  CUSTOM
  UNIT_WISE
  DIFFICULTY_BASED
  RANDOM
  FLASH
  AI_GENERATED
  PERFORMANCE_ANALYZER
  PBQ_BASED
  THEORY_BASED
  REVISION
  RETAKE
}

enum ModeOfTest {
  USER //created by premium users
  PUBLIC //created for non premium users
  ALL //created for all users like model tests
}

model CustomTest {
  id    String  @id @default(cuid())
  name  String
  slug  String  @default("test")
  image String? @default("")

  type TypeOfTest @default(MODEL)
  mode ModeOfTest  @default(ALL)

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id]) // Relation to User model

  archive Boolean @default(false)

  usersConnected String[] @default([])

  keysUsed String[] @default([])
  date     DateTime @default(now())

  questions String[]

  usersAttended UserScore[]
  testAnalytic  TestAnalytic[]
}

// for leaderboards
model UserScore {
  id         String @id @default(cuid())
  username   String
  totalScore Float  @default(0)

  customTestId String
  customTest   CustomTest @relation(fields: [customTestId], references: [id])
}

model TestAnalytic {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  customTestId String
  customTest   CustomTest @relation(fields: [customTestId], references: [id])

  testQuestionAnswer TestQuestionAnswer[]

  createdAt DateTime @default(now())
}

// to store questions and answers (from users after tests) for above testanalytics
model TestQuestionAnswer {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id])

  userAnswer String

  testAnalyticId String
  testAnalytic   TestAnalytic @relation(fields: [testAnalyticId], references: [id])
}

// FEEDBACK ------------------------------------------------
model Feedback {
  id      String  @id @default(cuid()) // Unique identifier with CUID
  name    String
  email   String
  message String
  image   String?

  createdAt DateTime @default(now())
}


// FEEDBACK ------------------------------------------------
model SubscriptionRequest {
  id      String  @id @default(cuid()) // Unique identifier with CUID
  name    String
  email   String
  phone String

  createdAt DateTime @default(now())
}
