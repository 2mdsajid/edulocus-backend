generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// different users roles
enum ROLE {
    USER
    ADMIN
    SUPERADMIN
    MODERATOR
    SAJID
}

// for multiple streams
enum STREAM {
    UG
    PG
}

// to enum custom tests created by whom
enum ModeOfTest {
    USER //created by premium users
    PUBLIC //created for non premium users
    ALL //created for all users like model tests
}

// for group members
enum GroupRole {
    MEMBER
    MODERATOR
    ADMIN
}

// for group members
enum MemberStatus {
    ACTIVE
    INACTIVE
    BANNED
}

// different types of tests that is available
// amed in /lib/global.d.ts in FE as well
enum TypeOfTest {
    MODEL
    SUBJECT_WISE
    CHAPTER_WISE
    TOPIC_WISE
    CUSTOM
    DAILY_TEST
    UNIT_WISE
    DIFFICULTY_BASED
    RANDOM
    FLASH
    AI_GENERATED
    PERFORMANCE_ANALYZER
    PBQ_BASED
    THEORY_BASED
    REVISION
    RETAKE
    PAST_PAPER
    LIVE //newly added --- not in the tests types global data
}

// USER ------------------------------------------------------------
model User {
    id           String   @id @default(uuid())
    googleId     String?  @unique
    name         String
    email        String   @unique
    password     String?
    image        String?
    role         ROLE     @default(USER)
    key          String   @default("")
    isCompleted  Boolean  @default(false)
    tokensUsed   String[] @default([])
    institution  String?
    isSubscribed Boolean  @default(false)

    emailVerified DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime? @updatedAt

    stream STREAM @default(PG)

    payments           Payment[]
    customTestsCreated CustomTest[]
    testAnalytics      TestAnalytic[]
    GroupMember        GroupMember[]

    Groups Group[]
}

model Payment {
    id        Int       @id @default(autoincrement())
    isPaid    Boolean   @default(false)
    paymentID String?
    expireAt  DateTime?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Group
model Group {
    id          String    @id @default(uuid())
    createdBy   String
    creator     User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
    name        String
    description String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt

    // Members of the group with their roles
    members GroupMember[]

    // Custom tests created by moderators in the group
    customTests CustomTest[]

    // Additional fields like image, slug, etc., can be added as needed
    image String?
    slug  String  @unique
}

model GroupMember {
    id        String    @id @default(uuid())
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    groupId   String
    group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupRole GroupRole @default(MEMBER)
    joinedAt  DateTime  @default(now())

    // Additional fields like permissions, status, etc., can be added as needed
    status MemberStatus @default(ACTIVE)

    @@unique([userId, groupId])
}


model ChapterwiseRegistration {
    id        String   @id @default(uuid())
    name      String
    email     String
    phone     String
    message   String
    createdAt DateTime @default(now())
}


// QUESTIONS -----------------------------------------------------------
model Question {
    id             String          @id @default(cuid())
    question       String
    options        Option?
    answer         ANSWER
    explanation    String          @default("")
    images         Images?
    // Keep these old string fields TEMPORARILY during the migration.
    // They will be removed AFTER the data migration script populates subjectId/chapterId.
    subject        String          @default("unknown")
    chapter        String          @default("unknown")

    unit           String          @default("unknown")
    category       String          @default("mbbs")
    difficulty     String          @default("m")
    isreported     IsReported?
    isverified     IsVerified?
    isflagged      IsFlagged?
    IsPast         IsPastQuestion?
    attempt        Int             @default(0)
    correctattempt Int             @default(0)
    stream         STREAM          @default(PG)
    analytic       TestQuestionAnswer[]

    // Relationship to the QuestionVideo model
    videoUrl QuestionVideo?

    // New foreign key fields - make them optional (nullable) initially for migration safety
    // They will be made required (`String`) after data migration if all data is guaranteed to have them.
    subjectId      String?
    chapterId      String?

    // Explicitly named relations to avoid ambiguity with existing 'subject'/'chapter' string fields
    // The name in the @relation() attribute must match the name in the other model.
    subjectEntity  Subject?        @relation("SubjectQuestions", fields: [subjectId], references: [id])
    chapterEntity  Chapter?        @relation("ChapterQuestions", fields: [chapterId], references: [id])


    @@index([chapterId])
    @@index([subjectId])
    @@index([chapterId, subjectId])
    @@index([stream])
    // You might also temporarily keep the old indexes on 'subject' and 'chapter'
    // until those columns are removed.
    @@index([subject])
    @@index([chapter])
}

// to store video url of the explanation
model QuestionVideo {
    id         String   @id @default(cuid())
    url        String // This field will always contain a URL if a record exists
    questionId String   @unique
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Subject {
    id        String     @id @default(cuid())
    name      String     @unique
    chapters  Chapter[]  // Relation to Chapters belonging to this subject
    questions Question[] @relation("SubjectQuestions") // Explicitly named relation matching Question's subjectEntity
    stream    STREAM     @default(UG)

    @@index([stream])
}

model Chapter {
    id        String     @id @default(cuid())
    name      String
    subjectId String
    subject   Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    questions Question[] @relation("ChapterQuestions") // Explicitly named relation matching Question's chapterEntity
    stream    STREAM     @default(UG)

    @@unique([subjectId, name]) // Ensures a chapter name is unique within a given subject
    @@index([subjectId])
    @@index([stream])
}

enum ANSWER {
    a
    b
    c
    d
}

model Option {
    questionId String   @id
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    a          String
    b          String
    c          String
    d          String
}

model Images {
    questionId String   @id
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    qn         String?
    a          String?
    b          String?
    c          String?
    d          String?
    exp        String?
}

model IsReported {
    questionId String    @id
    question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
    state      Boolean   @default(false)
    message    String?
    date       DateTime?
}

model IsVerified {
    questionId String    @id
    question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
    state      Boolean   @default(false)
    by         String?
    date       DateTime?
}

model IsFlagged {
    questionId String    @id
    question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
    state      Boolean   @default(false)
    by         String?
    message    String?
    date       DateTime?
}

model QuestionCount {
    id        String @id @default(cuid())
    subject String
    chapter String
    subjectId String @default("") // Or String?
    chapterId String @default("") // Or String?
    count     Int    @default(0)
    stream STREAM @default(PG)
    @@unique([subject, chapter]) // Remove this after data migration
    // @@unique([subjectId, chapterId]) // Add this after data migration
    @@index([stream])
}

model IsPastQuestion {
    questionId  String   @id
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    stream      STREAM   @default(PG)
    year        Int
    category    String?  @default("")
    affiliation String?  @default("")
}

// TESTS ------------------------------------------------------------------------------
model CustomTest {
    id    String  @id @default(cuid())
    name  String
    slug  String  @default("test")
    image String? @default("")

    // specific description for tests -- useful during collabs
    description  String?
    imageUrl     String? //for test image, who created -- like by any group
    specialUrl   String?
    specialImage String? //for promo ad

    // all tests are custom tests -- a custom test will be created with every test 
    type TypeOfTest @default(MODEL)

    // mode is how user access the custom tests -- 
    // if premium user created it, it will be USER
    // if it is created by non premium users, it will be PUBLIC
    // if it is created for all -- by admins, it will be ALL
    mode ModeOfTest @default(ALL)

    // for locking test

    createdById String
    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

    archive Boolean @default(false)

    usersConnected String[] @default([])
    keysUsed       String[] @default([])
    date           DateTime @default(now())

    questions     String[]
    usersAttended UserScore[]
    testAnalytic  TestAnalytic[]

    // stream of the custom test -- for UG and PG
    stream STREAM @default(PG)

    // for locking the test
    testLock TestLock?

    pastPaper PastPaper?
    Group     Group?     @relation(fields: [groupId], references: [id])
    groupId   String?
}

model TestLock {
    id        String     @id @default(cuid())
    testId    String     @unique // Ensures one lock configuration per test, or one-to-one
    test      CustomTest @relation(fields: [testId], references: [id], onDelete: Cascade)
    lockCodes String[]   @default([]) // Array of codes that can unlock this test
    isLocked  Boolean    @default(true) // Explicitly state if it's currently locked
    keysUsed  String[]   @default([]) // This could potentially be moved to TestLock if it's strictly for unlocking

    // Optional: Add more fields for complex locking logic
    // lockMessage String? // Message shown when locked
    // expiresAt   DateTime? // When the lock automatically expires
    // allowedUsers String[] // List of user IDs specifically allowed to bypass code (e.g., admins)
    // unlockCount Int @default(0) // How many times it has been unlocked
    // createdAt   DateTime  @default(now())
    // updatedAt   DateTime  @updatedAt
}

// to store past papers 
model PastPaper {
    customTestId String     @id
    customTest   CustomTest @relation(fields: [customTestId], references: [id], onDelete: Cascade)
    stream       STREAM     @default(PG)
    year         Int
    isUnlocked   Boolean    @default(false)
    category     String?    @default("")
    affiliation  String?    @default("")
}

// for leaderboards
model UserScore {
    id         String @id @default(cuid())
    username   String
    totalScore Float  @default(0)

    customTestId String
    customTest   CustomTest @relation(fields: [customTestId], references: [id], onDelete: Cascade)
}

model TestAnalytic {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    customTestId String
    customTest   CustomTest @relation(fields: [customTestId], references: [id], onDelete: Cascade)

    testQuestionAnswer TestQuestionAnswer[]

    createdAt DateTime @default(now())
}

// to store questions and answers (from users after tests) for above testanalytics
model TestQuestionAnswer {
    id         String   @id @default(cuid())
    questionId String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    userAnswer String

    testAnalyticId String
    testAnalytic   TestAnalytic @relation(fields: [testAnalyticId], references: [id], onDelete: Cascade)
}

// FEEDBACK ------------------------------------------------
model Feedback {
    id      String  @id @default(cuid())
    name    String
    email   String
    message String
    image   String?

    createdAt DateTime @default(now())
}

// FEEDBACK ------------------------------------------------
model SubscriptionRequest {
    id    String @id @default(cuid())
    name  String
    email String
    phone String

    stream STREAM @default(PG)

    createdAt DateTime @default(now())
}
